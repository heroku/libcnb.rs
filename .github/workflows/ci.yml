name: CI

on:
  # Only perform branch builds for `main`, to avoid duplicate builds on PRs.
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update Rust toolchain
        # Most of the time this will be a no-op, since GitHub releases new images every week
        # which include the latest stable release of Rust, Rustup, Clippy and rustfmt.
        run: rustup update
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.4.0
      - name: Clippy
        # Using --all-targets so tests are checked and --deny to fail on warnings.
        # Not using --locked here and below since Cargo.lock is in .gitignore.
        run: cargo clippy --all-targets --all-features -- --deny warnings
      - name: rustfmt
        run: cargo fmt -- --check --verbose
      - name: Check docs
        # Using RUSTDOCFLAGS until `cargo doc --check` is stabilised:
        # https://github.com/rust-lang/cargo/issues/10025
        run: RUSTDOCFLAGS="-D warnings" cargo doc --all-features --document-private-items --no-deps

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update Rust toolchain
        run: rustup update
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.4.0
      - name: Run tests
        run: cargo test --all-features

  integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install musl-tools
        run: sudo apt-get install musl-tools --no-install-recommends
      - name: Update Rust toolchain
        run: rustup update
      - name: Install Rust linux-musl target
        run: rustup target add x86_64-unknown-linux-musl
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.4.0
      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v4.7.0
      - name: Run integration tests
        # Runs any tests annotated with the `#[ignore]` attribute (which in this repo, are all of the integration tests).
        run: cargo test -- --ignored
      - name: Compile and package examples/basics
        run: cargo run --package libcnb-cargo -- libcnb package
        working-directory: ./examples/basics
      - name: Pack build using examples/basics
        # Uses a non-libc image to validate the static musl cross-compilation.
        run: pack build example-basics --builder cnbs/sample-builder:alpine --buildpack target/buildpack/debug/libcnb-examples_basics --path examples/
